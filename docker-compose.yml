version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: coaching_postgres
    environment:
      POSTGRES_DB: coaching_db
      POSTGRES_USER: coaching_user
      POSTGRES_PASSWORD: coaching_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - coaching_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coaching_user -d coaching_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: coaching_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - coaching_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.14
    container_name: coaching_neo4j
    environment:
      NEO4J_AUTH: neo4j/coaching_password
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - coaching_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "coaching_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: coaching_backend
    environment:
      - DATABASE_URL=postgresql://coaching_user:coaching_password@postgres:5432/coaching_db
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=coaching_password
      - SECRET_KEY=your-secret-key-change-in-production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - coaching_network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: coaching_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - coaching_network
    restart: unless-stopped

  # AI Services (Computer Vision)
  computer-vision:
    build:
      context: ./ai-services/computer-vision
      dockerfile: Dockerfile
    container_name: coaching_computer_vision
    ports:
      - "8001:8001"
    volumes:
      - ./ai-services/computer-vision:/app
      - vision_uploads:/app/uploads
    networks:
      - coaching_network
    restart: unless-stopped

  # AI Services (Tactical Analysis)
  tactical-analysis:
    build:
      context: ./ai-services/tactical-analysis
      dockerfile: Dockerfile
    container_name: coaching_tactical_analysis
    ports:
      - "8002:8002"
    volumes:
      - ./ai-services/tactical-analysis:/app
    networks:
      - coaching_network
    restart: unless-stopped

  # AI Services (Video Intelligence)
  video-intelligence:
    build:
      context: ./ai-services/video-intelligence
      dockerfile: Dockerfile
    container_name: coaching_video_intelligence
    ports:
      - "8003:8003"
    volumes:
      - ./ai-services/video-intelligence:/app
      - video_uploads:/app/uploads
    networks:
      - coaching_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  backend_uploads:
  backend_logs:
  vision_uploads:
  video_uploads:

networks:
  coaching_network:
    driver: bridge 